# Original Author was Kalle@kde.org
# I lifted it in some mater. (Stephan Kulow)
# I used much code from Janos Farkas

dnl Process this file with autoconf to produce a configure script.
AC_INIT(acinclude.m4) dnl a source file from your sub dir

dnl This is so we can use kde-common
AC_CONFIG_AUX_DIR(admin)

AC_CANONICAL_SYSTEM 
AC_ARG_PROGRAM

dnl Automake doc recommends to do this only here. (Janos)
AM_INIT_AUTOMAKE(kdesupport, 1.1.2) dnl searches for some needed programs

dnl make $KDEDIR the default for the installation
AC_PREFIX_DEFAULT(${KDEDIR:-/usr/local/kde})

dnl generate the config header
AM_CONFIG_HEADER(config.h)

dnl Checks for programs.
AC_CHECK_COMPILERS
KDE_PROG_LIBTOOL dnl for libraries

dnl find out some variables (not supported yet)
AC_AIX
AC_MINIX
KDE_MISC_TESTS

dnl Checks for X - libraries and includes.
AC_PATH_QT

dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_CHECK_HEADERS(stdlib.h string.h sys/file.h unistd.h fcntl.h sys/types.h)
AC_CHECK_HEADERS(memory.h malloc.h errno.h)
AC_CHECK_HEADERS(io.h sys/time.h stdarg.h stddef.h)
AC_CHECK_FUNCS(gettimeofday snprintf)
AC_CHECK_FUNC(tempnam,,AC_DEFINE(tempnam,_FP_tempnam))
AC_LANG_CPLUSPLUS
AC_CHECK_HEADERS(sysent.h)

AC_LANG_C
AC_CHECK_LIB(dbm, main, LIBDBM="-ldbm")
AC_CHECK_LIB(ndbm, main, LIBNDBM="-lndbm")
AC_HAVE_FUNCS(rename ftruncate flock bcopy fsync)
AC_REPLACE_FUNCS(getopt)
AC_ALLOCA
AC_SUBST(ALLOCA)
AC_OFF_T
AC_ST_BLKSIZE

AC_MSG_CHECKING([for strerror])
AC_TRY_LINK([
char *blubb() { return (char *) strerror (42); }
],[
(void) blubb();
],have_strerror=yes,AC_DEFINE(strerror,_FP_strerror)
have_strerror=no)
AC_MSG_RESULT($have_strerror)
 
AC_MSG_CHECKING([for stdin])
AC_TRY_LINK([
#include <stdio.h>
char *blubb() { FILE *in, *out; in=stdin; out=stdout; return (char*)0; }
],[
(void) blubb();
],have_stdio=yes,AC_DEFINE(HAVE_STDIO)
have_stdio=no)
AC_MSG_RESULT($have_stdio)
 
if test "$ac_cv_header_stdc" = "no" ; then
   AC_CHECK_HEADERS(stdarg.h varargs.h)
   if test "$ac_cv_header_stdarg_h" = "no" ; then
        if test "$ac_cv_header_varargs_h" = "no" ; then
            AC_MSG_ERROR([neither stdarg.h nor varargs.h present])
        fi
   fi
fi

AC_ARG_WITH(libjpeg, 
    [  --with-libjpeg          install jpeglib6a [default=yes]   ],
    [ ac_libjpeg="$withval"],
    [ ac_libjpeg="yes" ])

AC_ARG_WITH(libgif, 
    [  --with-libgif           install giflib3.0 [default=yes]   ],
    [ ac_libgif="$withval"],
    [ ac_libgif="yes" ])

AC_ARG_WITH(libgdbm,  
    [  --with-libgdbm          install gdbm-1.7.3 [default=yes]  ],
    [ ac_libgdbm="$withval"],
    [ ac_libgdbm="yes" ])

AC_ARG_WITH(libmimelib,
    [  --with-libmimelib       install mimelib-1.0 [default=yes] ],
    [ ac_libmimelib="$withval"],
    [ ac_libmimelib="yes" ])

AC_ARG_WITH(libuulib,
    [  --with-libuulib         install uulib-5.13 [default=yes]  ],
    [ ac_libuulib="$withval"],
    [ ac_libuulib="yes" ])

AC_ARG_WITH(sprite-field,
    [  --with-libsprite-field  install QwSpriteField-1.6 [default=yes] ],
    [ ac_libspritefield="$withval"],
    [ ac_libspritefield="yes" ])

if test "$ac_libjpeg" = "yes"; then
  TOPSUBDIRS="jpeglib6a"
fi

if test "$ac_libgdbm" = "yes"; then
  TOPSUBDIRS="$TOPSUBDIRS gdbm"
fi

if test "$ac_libgif" = "yes"; then
  TOPSUBDIRS="$TOPSUBDIRS giflib30"
fi

if test "$ac_libmimelib" = "yes"; then
  TOPSUBDIRS="$TOPSUBDIRS mimelib"
fi

if test "$ac_libuulib" = "yes"; then
  TOPSUBDIRS="$TOPSUBDIRS uulib"
fi

if test "$ac_libspritefield" = "yes"; then
  TOPSUBDIRS="$TOPSUBDIRS QwSpriteField"
fi

AC_SUBST(TOPSUBDIRS)

AC_MSG_CHECKING(if the compiler supports function prototypes)
AC_TRY_COMPILE(,[extern void exit(int status);],[wi_cv_prototypes=yes
AC_DEFINE(PROTOTYPES)],wi_cv_prototypes=no)
AC_MSG_RESULT($wi_cv_prototypes)

dnl Checks for typedefs, structures, and compiler characteristics.
AM_C_PROTOTYPES
AC_C_CONST
AC_C_INLINE

dnl check if the compiler has bool
AC_CHECK_BOOL
AC_CHECK_GETHOSTNAME

dnl Perform program name transformation
AC_ARG_PROGRAM

dnl output files
topdir=`pwd`
AC_SUBST(topdir)
AC_SUBST(LIBCOMPAT)

dnl javascript macros
AC_REQUIRE([KDE_CHECK_LIBDL])
kde_safe_LIBS="$LIBS"
LIBS="$LIBS $LIBDL"
AC_CHECK_LIB(js, main, kde_have_libjs=yes,
			kde_have_libjs=no)
LIBS=$kde_safe_LIBS

if test "x$kde_have_libjs" = "xno"; then
	AC_MSG_WARN([you should get yourself a js distribution. 
kdesupport contains only a small part of it.
For this have a look at http://people.ssh.fi/mtr/js
])
 	TOPSUBDIRS="$TOPSUBDIRS js"
	JS_CHECK_FEATURES
fi

AC_OUTPUT(Makefile 
	jpeglib6a/Makefile 
	giflib30/Makefile 
	mimelib/Makefile 
	mimelib/mimelib/Makefile
	uulib/Makefile 
	js/Makefile
	gdbm/Makefile
	rdb/Makefile 
	QwSpriteField/Makefile)
